/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as authRouteRouteImport } from './routes/(auth)/route'
import { Route as appRouteRouteImport } from './routes/(app)/route'
import { Route as appIndexRouteImport } from './routes/(app)/index'
import { Route as authSignupRouteImport } from './routes/(auth)/signup'
import { Route as authSigninRouteImport } from './routes/(auth)/signin'
import { Route as appProductIndexRouteImport } from './routes/(app)/product/index'
import { Route as appOrderIndexRouteImport } from './routes/(app)/order/index'
import { Route as appFileIndexRouteImport } from './routes/(app)/file/index'
import { Route as appCategoryIndexRouteImport } from './routes/(app)/category/index'
import { Route as appProductCreateRouteImport } from './routes/(app)/product/create'
import { Route as appProductIdRouteImport } from './routes/(app)/product/$id'

const authRouteRoute = authRouteRouteImport.update({
  id: '/(auth)',
  getParentRoute: () => rootRouteImport,
} as any)
const appRouteRoute = appRouteRouteImport.update({
  id: '/(app)',
  getParentRoute: () => rootRouteImport,
} as any)
const appIndexRoute = appIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => appRouteRoute,
} as any)
const authSignupRoute = authSignupRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => authRouteRoute,
} as any)
const authSigninRoute = authSigninRouteImport.update({
  id: '/signin',
  path: '/signin',
  getParentRoute: () => authRouteRoute,
} as any)
const appProductIndexRoute = appProductIndexRouteImport.update({
  id: '/product/',
  path: '/product/',
  getParentRoute: () => appRouteRoute,
} as any)
const appOrderIndexRoute = appOrderIndexRouteImport.update({
  id: '/order/',
  path: '/order/',
  getParentRoute: () => appRouteRoute,
} as any)
const appFileIndexRoute = appFileIndexRouteImport.update({
  id: '/file/',
  path: '/file/',
  getParentRoute: () => appRouteRoute,
} as any)
const appCategoryIndexRoute = appCategoryIndexRouteImport.update({
  id: '/category/',
  path: '/category/',
  getParentRoute: () => appRouteRoute,
} as any)
const appProductCreateRoute = appProductCreateRouteImport.update({
  id: '/product/create',
  path: '/product/create',
  getParentRoute: () => appRouteRoute,
} as any)
const appProductIdRoute = appProductIdRouteImport.update({
  id: '/product/$id',
  path: '/product/$id',
  getParentRoute: () => appRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof appIndexRoute
  '/signin': typeof authSigninRoute
  '/signup': typeof authSignupRoute
  '/product/$id': typeof appProductIdRoute
  '/product/create': typeof appProductCreateRoute
  '/category': typeof appCategoryIndexRoute
  '/file': typeof appFileIndexRoute
  '/order': typeof appOrderIndexRoute
  '/product': typeof appProductIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof appIndexRoute
  '/signin': typeof authSigninRoute
  '/signup': typeof authSignupRoute
  '/product/$id': typeof appProductIdRoute
  '/product/create': typeof appProductCreateRoute
  '/category': typeof appCategoryIndexRoute
  '/file': typeof appFileIndexRoute
  '/order': typeof appOrderIndexRoute
  '/product': typeof appProductIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/(app)': typeof appRouteRouteWithChildren
  '/(auth)': typeof authRouteRouteWithChildren
  '/(auth)/signin': typeof authSigninRoute
  '/(auth)/signup': typeof authSignupRoute
  '/(app)/': typeof appIndexRoute
  '/(app)/product/$id': typeof appProductIdRoute
  '/(app)/product/create': typeof appProductCreateRoute
  '/(app)/category/': typeof appCategoryIndexRoute
  '/(app)/file/': typeof appFileIndexRoute
  '/(app)/order/': typeof appOrderIndexRoute
  '/(app)/product/': typeof appProductIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/signin'
    | '/signup'
    | '/product/$id'
    | '/product/create'
    | '/category'
    | '/file'
    | '/order'
    | '/product'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/signin'
    | '/signup'
    | '/product/$id'
    | '/product/create'
    | '/category'
    | '/file'
    | '/order'
    | '/product'
  id:
    | '__root__'
    | '/(app)'
    | '/(auth)'
    | '/(auth)/signin'
    | '/(auth)/signup'
    | '/(app)/'
    | '/(app)/product/$id'
    | '/(app)/product/create'
    | '/(app)/category/'
    | '/(app)/file/'
    | '/(app)/order/'
    | '/(app)/product/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  appRouteRoute: typeof appRouteRouteWithChildren
  authRouteRoute: typeof authRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(auth)': {
      id: '/(auth)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(app)': {
      id: '/(app)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof appRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(app)/': {
      id: '/(app)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof appIndexRouteImport
      parentRoute: typeof appRouteRoute
    }
    '/(auth)/signup': {
      id: '/(auth)/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof authSignupRouteImport
      parentRoute: typeof authRouteRoute
    }
    '/(auth)/signin': {
      id: '/(auth)/signin'
      path: '/signin'
      fullPath: '/signin'
      preLoaderRoute: typeof authSigninRouteImport
      parentRoute: typeof authRouteRoute
    }
    '/(app)/product/': {
      id: '/(app)/product/'
      path: '/product'
      fullPath: '/product'
      preLoaderRoute: typeof appProductIndexRouteImport
      parentRoute: typeof appRouteRoute
    }
    '/(app)/order/': {
      id: '/(app)/order/'
      path: '/order'
      fullPath: '/order'
      preLoaderRoute: typeof appOrderIndexRouteImport
      parentRoute: typeof appRouteRoute
    }
    '/(app)/file/': {
      id: '/(app)/file/'
      path: '/file'
      fullPath: '/file'
      preLoaderRoute: typeof appFileIndexRouteImport
      parentRoute: typeof appRouteRoute
    }
    '/(app)/category/': {
      id: '/(app)/category/'
      path: '/category'
      fullPath: '/category'
      preLoaderRoute: typeof appCategoryIndexRouteImport
      parentRoute: typeof appRouteRoute
    }
    '/(app)/product/create': {
      id: '/(app)/product/create'
      path: '/product/create'
      fullPath: '/product/create'
      preLoaderRoute: typeof appProductCreateRouteImport
      parentRoute: typeof appRouteRoute
    }
    '/(app)/product/$id': {
      id: '/(app)/product/$id'
      path: '/product/$id'
      fullPath: '/product/$id'
      preLoaderRoute: typeof appProductIdRouteImport
      parentRoute: typeof appRouteRoute
    }
  }
}

interface appRouteRouteChildren {
  appIndexRoute: typeof appIndexRoute
  appProductIdRoute: typeof appProductIdRoute
  appProductCreateRoute: typeof appProductCreateRoute
  appCategoryIndexRoute: typeof appCategoryIndexRoute
  appFileIndexRoute: typeof appFileIndexRoute
  appOrderIndexRoute: typeof appOrderIndexRoute
  appProductIndexRoute: typeof appProductIndexRoute
}

const appRouteRouteChildren: appRouteRouteChildren = {
  appIndexRoute: appIndexRoute,
  appProductIdRoute: appProductIdRoute,
  appProductCreateRoute: appProductCreateRoute,
  appCategoryIndexRoute: appCategoryIndexRoute,
  appFileIndexRoute: appFileIndexRoute,
  appOrderIndexRoute: appOrderIndexRoute,
  appProductIndexRoute: appProductIndexRoute,
}

const appRouteRouteWithChildren = appRouteRoute._addFileChildren(
  appRouteRouteChildren,
)

interface authRouteRouteChildren {
  authSigninRoute: typeof authSigninRoute
  authSignupRoute: typeof authSignupRoute
}

const authRouteRouteChildren: authRouteRouteChildren = {
  authSigninRoute: authSigninRoute,
  authSignupRoute: authSignupRoute,
}

const authRouteRouteWithChildren = authRouteRoute._addFileChildren(
  authRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  appRouteRoute: appRouteRouteWithChildren,
  authRouteRoute: authRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
